{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAVITEJA\\\\Downloads\\\\ai-support-assistant\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loadingIds, setLoadingIds] = useState([]); // IDs of emails generating AI drafts\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n\n      // Generate AI draft for emails without draft\n      const updatedEmails = await Promise.all(data.map(async email => {\n        if (!email.draft_reply) {\n          setLoadingIds(prev => [...prev, email.id]);\n          try {\n            const draftRes = await fetch(`http://localhost:8000/email/${email.id}/generate-draft`);\n            if (draftRes.ok) {\n              const draftData = await draftRes.json();\n              email.draft_reply = draftData.draft_reply;\n            } else {\n              email.draft_reply = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n            }\n          } catch (err) {\n            console.error(\"Draft fetch error:\", err);\n            email.draft_reply = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n          }\n          setLoadingIds(prev => prev.filter(id => id !== email.id));\n        }\n        return email;\n      }));\n      setEmails(updatedEmails);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          draft_reply: draft\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      fetchEmails(); // Refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n\n  // Compute Analytics\n  const total = emails.length;\n  const urgent = emails.filter(e => e.priority === \"Urgent\").length;\n  const negative = emails.filter(e => e.sentiment === \"Negative\").length;\n  const pending = emails.filter(e => !e.draft_reply).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Support Assistant Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        fontWeight: 'bold'\n      },\n      children: [\"Total: \", total, \" \\u2022 Urgent: \", urgent, \" \\u2022 Negative: \", negative, \" \\u2022 Pending: \", pending]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: [emails.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-emails\",\n        children: \"No emails yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }, this), emails.map(e => /*#__PURE__*/_jsxDEV(EmailCard, {\n        email: e,\n        loadingDraft: loadingIds.includes(e.id),\n        onSave: draft => onSaveDraft(e.id, draft)\n      }, e.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"GjiBIFQsJYz+SUTvisb8qsvmMsQ=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","EmailCard","Analytics","jsxDEV","_jsxDEV","Dashboard","_s","emails","setEmails","loadingIds","setLoadingIds","fetchEmails","res","fetch","data","json","updatedEmails","Promise","all","map","email","draft_reply","prev","id","draftRes","ok","draftData","err","console","error","filter","alert","onSaveDraft","draft","method","headers","body","JSON","stringify","Error","interval","setInterval","clearInterval","total","length","urgent","e","priority","negative","sentiment","pending","className","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","fontWeight","loadingDraft","includes","onSave","_c","$RefreshReg$"],"sources":["C:/Users/RAVITEJA/Downloads/ai-support-assistant/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\n\nexport default function Dashboard() {\n  const [emails, setEmails] = useState([]);\n  const [loadingIds, setLoadingIds] = useState([]); // IDs of emails generating AI drafts\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n\n      // Generate AI draft for emails without draft\n      const updatedEmails = await Promise.all(\n        data.map(async (email) => {\n          if (!email.draft_reply) {\n            setLoadingIds((prev) => [...prev, email.id]);\n            try {\n              const draftRes = await fetch(`http://localhost:8000/email/${email.id}/generate-draft`);\n              if (draftRes.ok) {\n                const draftData = await draftRes.json();\n                email.draft_reply = draftData.draft_reply;\n              } else {\n                email.draft_reply = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n              }\n            } catch (err) {\n              console.error(\"Draft fetch error:\", err);\n              email.draft_reply = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n            }\n            setLoadingIds((prev) => prev.filter(id => id !== email.id));\n          }\n          return email;\n        })\n      );\n\n      setEmails(updatedEmails);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ draft_reply: draft }),\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      fetchEmails(); // Refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n\n  // Compute Analytics\n  const total = emails.length;\n  const urgent = emails.filter(e => e.priority === \"Urgent\").length;\n  const negative = emails.filter(e => e.sentiment === \"Negative\").length;\n  const pending = emails.filter(e => !e.draft_reply).length;\n\n  return (\n    <div className=\"dashboard\" style={{ padding: '20px' }}>\n      <h1>AI Support Assistant Dashboard</h1>\n\n      <div style={{ marginBottom: '20px', fontWeight: 'bold' }}>\n        Total: {total} • Urgent: {urgent} • Negative: {negative} • Pending: {pending}\n      </div>\n\n      <div className=\"email-list\">\n        {emails.length === 0 && <div className=\"no-emails\">No emails yet.</div>}\n        {emails.map(e => (\n          <EmailCard\n            key={e.id}\n            email={e}\n            loadingDraft={loadingIds.includes(e.id)}\n            onSave={(draft) => onSaveDraft(e.id, draft)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAVITEJA\\\\Downloads\\\\ai-support-assistant\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loadingFetch, setLoadingFetch] = useState(false);\n  const [loadingProcess, setLoadingProcess] = useState(false);\n  const [loadingRefresh, setLoadingRefresh] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    setLoadingRefresh(true);\n    setStatusMessage(\"Refreshing emails...\");\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n      setStatusMessage(\"Emails refreshed!\");\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to fetch emails\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n    setLoadingRefresh(false);\n  };\n\n  // Trigger backend fetch-emails (IMAP/SMTP)\n  const triggerFetchEmails = async () => {\n    setLoadingFetch(true);\n    setStatusMessage(\"Fetching emails...\");\n    try {\n      await fetch(\"http://localhost:8000/fetch-emails\", {\n        method: \"POST\"\n      });\n      setStatusMessage(\"Email fetch started!\");\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to start fetching emails\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n    setLoadingFetch(false);\n  };\n\n  // Trigger backend process-all\n  const triggerProcessAll = async () => {\n    setLoadingProcess(true);\n    setStatusMessage(\"Processing emails...\");\n    try {\n      await fetch(\"http://localhost:8000/process-all\");\n      setStatusMessage(\"All emails processed!\");\n      await fetchEmails(); // refresh after processing\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to process emails\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n    setLoadingProcess(false);\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    setStatusMessage(\"Saving draft...\");\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          draft_reply: draft\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      setStatusMessage(\"Draft saved!\");\n      await fetchEmails();\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Error saving draft\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Support Assistant Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        display: 'flex',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: triggerFetchEmails,\n        disabled: loadingFetch,\n        children: loadingFetch ? \"Fetching...\" : \"Fetch Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: triggerProcessAll,\n        disabled: loadingProcess,\n        children: loadingProcess ? \"Processing...\" : \"Process All Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchEmails,\n        disabled: loadingRefresh,\n        children: loadingRefresh ? \"Refreshing...\" : \"Refresh Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '15px',\n        color: '#333',\n        fontWeight: 'bold'\n      },\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Analytics, {\n      emails: emails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: [emails.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-emails\",\n        children: \"No emails yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }, this), emails.map(e => /*#__PURE__*/_jsxDEV(EmailCard, {\n        email: e,\n        onSave: draft => onSaveDraft(e.id, draft)\n      }, e.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"w4qqp5kLYP93W1oGm1FvATyeGXI=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","EmailCard","Analytics","jsxDEV","_jsxDEV","Dashboard","_s","emails","setEmails","loadingFetch","setLoadingFetch","loadingProcess","setLoadingProcess","loadingRefresh","setLoadingRefresh","statusMessage","setStatusMessage","fetchEmails","res","fetch","data","json","err","console","error","setTimeout","triggerFetchEmails","method","triggerProcessAll","onSaveDraft","id","draft","headers","body","JSON","stringify","draft_reply","ok","Error","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","display","gap","onClick","disabled","color","fontWeight","length","map","e","email","onSave","_c","$RefreshReg$"],"sources":["C:/Users/RAVITEJA/Downloads/ai-support-assistant/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\n\nexport default function Dashboard() {\n  const [emails, setEmails] = useState([]);\n  const [loadingFetch, setLoadingFetch] = useState(false);\n  const [loadingProcess, setLoadingProcess] = useState(false);\n  const [loadingRefresh, setLoadingRefresh] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    setLoadingRefresh(true);\n    setStatusMessage(\"Refreshing emails...\");\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n      setStatusMessage(\"Emails refreshed!\");\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to fetch emails\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n    setLoadingRefresh(false);\n  };\n\n  // Trigger backend fetch-emails (IMAP/SMTP)\n  const triggerFetchEmails = async () => {\n    setLoadingFetch(true);\n    setStatusMessage(\"Fetching emails...\");\n    try {\n      await fetch(\"http://localhost:8000/fetch-emails\", { method: \"POST\" });\n      setStatusMessage(\"Email fetch started!\");\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to start fetching emails\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n    setLoadingFetch(false);\n  };\n\n  // Trigger backend process-all\n  const triggerProcessAll = async () => {\n    setLoadingProcess(true);\n    setStatusMessage(\"Processing emails...\");\n    try {\n      await fetch(\"http://localhost:8000/process-all\");\n      setStatusMessage(\"All emails processed!\");\n      await fetchEmails(); // refresh after processing\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to process emails\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n    setLoadingProcess(false);\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    setStatusMessage(\"Saving draft...\");\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ draft_reply: draft }),\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      setStatusMessage(\"Draft saved!\");\n      await fetchEmails();\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Error saving draft\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>AI Support Assistant Dashboard</h1>\n\n      <div style={{ marginBottom: '20px', display: 'flex', gap: '10px' }}>\n        <button onClick={triggerFetchEmails} disabled={loadingFetch}>\n          {loadingFetch ? \"Fetching...\" : \"Fetch Emails\"}\n        </button>\n\n        <button onClick={triggerProcessAll} disabled={loadingProcess}>\n          {loadingProcess ? \"Processing...\" : \"Process All Emails\"}\n        </button>\n\n        <button onClick={fetchEmails} disabled={loadingRefresh}>\n          {loadingRefresh ? \"Refreshing...\" : \"Refresh Emails\"}\n        </button>\n      </div>\n\n      {statusMessage && (\n        <div style={{ marginBottom: '15px', color: '#333', fontWeight: 'bold' }}>\n          {statusMessage}\n        </div>\n      )}\n\n      <Analytics emails={emails} />\n\n      <div className=\"email-list\">\n        {emails.length === 0 && <div className=\"no-emails\">No emails yet.</div>}\n        {emails.map(e => (\n          <EmailCard key={e.id} email={e} onSave={draft => onSaveDraft(e.id, draft)} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
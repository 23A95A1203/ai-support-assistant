{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAVITEJA\\\\Downloads\\\\ai-support-assistant\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard({\n  statusMessage\n}) {\n  _s();\n  const [emails, setEmails] = useState([]);\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n\n      // For any email without a draft, request AI-generated reply\n      const updatedEmails = await Promise.all(data.map(async email => {\n        if (!email.draft_reply) {\n          const draftRes = await fetch(`http://localhost:8000/email/${email.id}/generate-draft`);\n          if (draftRes.ok) {\n            const draftData = await draftRes.json();\n            email.draft_reply = draftData.draft_reply;\n          } else {\n            email.draft_reply = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n          }\n        }\n        return email;\n      }));\n      setEmails(updatedEmails);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          draft_reply: draft\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Support Assistant Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '15px',\n        color: '#333',\n        fontWeight: 'bold'\n      },\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Analytics, {\n      emails: emails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: [emails.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-emails\",\n        children: \"No emails yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }, this), emails.map(e => /*#__PURE__*/_jsxDEV(EmailCard, {\n        email: e,\n        onSave: draft => onSaveDraft(e.id, draft)\n      }, e.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"Pz1emXvf1o2teMcG4tW42BuWti4=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","EmailCard","Analytics","jsxDEV","_jsxDEV","Dashboard","statusMessage","_s","emails","setEmails","fetchEmails","res","fetch","data","json","updatedEmails","Promise","all","map","email","draft_reply","draftRes","id","ok","draftData","err","console","error","alert","onSaveDraft","draft","method","headers","body","JSON","stringify","Error","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","color","fontWeight","length","e","onSave","_c","$RefreshReg$"],"sources":["C:/Users/RAVITEJA/Downloads/ai-support-assistant/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\n\nexport default function Dashboard({ statusMessage }) {\n  const [emails, setEmails] = useState([]);\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n\n      // For any email without a draft, request AI-generated reply\n      const updatedEmails = await Promise.all(\n        data.map(async (email) => {\n          if (!email.draft_reply) {\n            const draftRes = await fetch(`http://localhost:8000/email/${email.id}/generate-draft`);\n            if (draftRes.ok) {\n              const draftData = await draftRes.json();\n              email.draft_reply = draftData.draft_reply;\n            } else {\n              email.draft_reply = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n            }\n          }\n          return email;\n        })\n      );\n\n      setEmails(updatedEmails);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ draft_reply: draft }),\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>AI Support Assistant Dashboard</h1>\n\n      {statusMessage && (\n        <div style={{ marginBottom: '15px', color: '#333', fontWeight: 'bold' }}>\n          {statusMessage}\n        </div>\n      )}\n\n      <Analytics emails={emails} />\n\n      <div className=\"email-list\">\n        {emails.length === 0 && <div className=\"no-emails\">No emails yet.</div>}\n        {emails.map(e => (\n          <EmailCard key={e.id} email={e} onSave={draft => onSaveDraft(e.id, draft)} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
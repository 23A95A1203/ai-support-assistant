{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAVITEJA\\\\Downloads\\\\ai-support-assistant\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    setStatusMessage(\"Fetching emails...\");\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n      setStatusMessage(\"Emails fetched successfully.\");\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to fetch emails.\");\n    }\n    setLoading(false);\n    setTimeout(() => setStatusMessage(\"\"), 3000); // clear status after 3s\n  };\n\n  // Trigger backend fetch-emails (IMAP/SMTP)\n  const triggerFetchEmails = async () => {\n    setStatusMessage(\"Starting email fetch...\");\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/fetch-emails\", {\n        method: \"POST\"\n      });\n      const data = await res.json();\n      setStatusMessage(\"Email fetch started!\");\n      console.log(data);\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to start fetching emails.\");\n    }\n    setLoading(false);\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n\n  // Trigger backend process-all\n  const triggerProcessAll = async () => {\n    setStatusMessage(\"Processing all emails...\");\n    setProcessing(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/process-all\");\n      const data = await res.json();\n      setStatusMessage(\"All emails processed!\");\n      fetchEmails(); // refresh after processing\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to process emails.\");\n    }\n    setProcessing(false);\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    setStatusMessage(\"Saving draft...\");\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          draft_reply: draft\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      setStatusMessage(\"Draft saved!\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Error saving draft.\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Support Assistant Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        display: 'flex',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: triggerFetchEmails,\n        disabled: loading || processing,\n        children: loading ? \"Fetching Emails...\" : \"Fetch Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: triggerProcessAll,\n        disabled: processing || loading,\n        children: processing ? \"Processing Emails...\" : \"Process All Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchEmails,\n        disabled: loading || processing,\n        children: loading ? \"Refreshing Emails...\" : \"Refresh Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '15px',\n        color: '#333'\n      },\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(Analytics, {\n      emails: emails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: [emails.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-emails\",\n        children: \"No emails yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }, this), emails.map(e => /*#__PURE__*/_jsxDEV(EmailCard, {\n        email: e,\n        onSave: draft => onSaveDraft(e.id, draft)\n      }, e.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"sAnozEkEoR70T0l5A/EcZt12vX0=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","EmailCard","Analytics","jsxDEV","_jsxDEV","Dashboard","_s","emails","setEmails","loading","setLoading","processing","setProcessing","statusMessage","setStatusMessage","fetchEmails","res","fetch","data","json","err","console","error","setTimeout","triggerFetchEmails","method","log","triggerProcessAll","onSaveDraft","id","draft","headers","body","JSON","stringify","draft_reply","ok","Error","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","display","gap","onClick","disabled","color","length","map","e","email","onSave","_c","$RefreshReg$"],"sources":["C:/Users/RAVITEJA/Downloads/ai-support-assistant/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\n\nexport default function Dashboard() {\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    setStatusMessage(\"Fetching emails...\");\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n      setStatusMessage(\"Emails fetched successfully.\");\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to fetch emails.\");\n    }\n    setLoading(false);\n    setTimeout(() => setStatusMessage(\"\"), 3000); // clear status after 3s\n  };\n\n  // Trigger backend fetch-emails (IMAP/SMTP)\n  const triggerFetchEmails = async () => {\n    setStatusMessage(\"Starting email fetch...\");\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/fetch-emails\", { method: \"POST\" });\n      const data = await res.json();\n      setStatusMessage(\"Email fetch started!\");\n      console.log(data);\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to start fetching emails.\");\n    }\n    setLoading(false);\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n\n  // Trigger backend process-all\n  const triggerProcessAll = async () => {\n    setStatusMessage(\"Processing all emails...\");\n    setProcessing(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/process-all\");\n      const data = await res.json();\n      setStatusMessage(\"All emails processed!\");\n      fetchEmails(); // refresh after processing\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Failed to process emails.\");\n    }\n    setProcessing(false);\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    setStatusMessage(\"Saving draft...\");\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ draft_reply: draft }),\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      setStatusMessage(\"Draft saved!\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      setStatusMessage(\"Error saving draft.\");\n    }\n    setTimeout(() => setStatusMessage(\"\"), 3000);\n  };\n\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>AI Support Assistant Dashboard</h1>\n\n      <div style={{ marginBottom: '20px', display: 'flex', gap: '10px' }}>\n        <button onClick={triggerFetchEmails} disabled={loading || processing}>\n          {loading ? \"Fetching Emails...\" : \"Fetch Emails\"}\n        </button>\n\n        <button onClick={triggerProcessAll} disabled={processing || loading}>\n          {processing ? \"Processing Emails...\" : \"Process All Emails\"}\n        </button>\n\n        <button onClick={fetchEmails} disabled={loading || processing}>\n          {loading ? \"Refreshing Emails...\" : \"Refresh Emails\"}\n        </button>\n      </div>\n\n      {statusMessage && <div style={{ marginBottom: '15px', color: '#333' }}>{statusMessage}</div>}\n\n      <Analytics emails={emails} />\n\n      <div className=\"email-list\">\n        {emails.length === 0 && <div className=\"no-emails\">No emails yet.</div>}\n        {emails.map(e => (\n          <EmailCard key={e.id} email={e} onSave={draft => onSaveDraft(e.id, draft)} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAVITEJA\\\\Downloads\\\\ai-support-assistant\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard({\n  statusMessage\n}) {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loadingDrafts, setLoadingDrafts] = useState({}); // track which emails are generating drafts\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n\n      // Trigger draft generation for emails missing drafts\n      data.forEach(email => {\n        if (!email.draft_reply) generateDraft(email.id);\n      });\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n  };\n\n  // Generate AI draft for a single email\n  const generateDraft = async id => {\n    try {\n      setLoadingDrafts(prev => ({\n        ...prev,\n        [id]: true\n      }));\n      const res = await fetch(`http://localhost:8000/email/${id}/generate-draft`);\n      let draftText = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n      if (res.ok) {\n        const data = await res.json();\n        draftText = data.draft_reply;\n      }\n\n      // Update the email in state\n      setEmails(prev => prev.map(e => e.id === id ? {\n        ...e,\n        draft_reply: draftText\n      } : e));\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoadingDrafts(prev => ({\n        ...prev,\n        [id]: false\n      }));\n    }\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          draft_reply: draft\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Support Assistant Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '15px',\n        color: '#333',\n        fontWeight: 'bold'\n      },\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Analytics, {\n      emails: emails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: [emails.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-emails\",\n        children: \"No emails yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 33\n      }, this), emails.map(e => /*#__PURE__*/_jsxDEV(EmailCard, {\n        email: e,\n        onSave: draft => onSaveDraft(e.id, draft),\n        loadingDraft: loadingDrafts[e.id] // pass loading state to EmailCard\n      }, e.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"k5QTpHO0l/TeJ8/M8NnrKq0Z7NA=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","EmailCard","Analytics","jsxDEV","_jsxDEV","Dashboard","statusMessage","_s","emails","setEmails","loadingDrafts","setLoadingDrafts","fetchEmails","res","fetch","data","json","forEach","email","draft_reply","generateDraft","id","err","console","error","alert","prev","draftText","ok","map","e","onSaveDraft","draft","method","headers","body","JSON","stringify","Error","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","color","fontWeight","length","onSave","loadingDraft","_c","$RefreshReg$"],"sources":["C:/Users/RAVITEJA/Downloads/ai-support-assistant/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\n\nexport default function Dashboard({ statusMessage }) {\n  const [emails, setEmails] = useState([]);\n  const [loadingDrafts, setLoadingDrafts] = useState({}); // track which emails are generating drafts\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n\n      // Trigger draft generation for emails missing drafts\n      data.forEach(email => {\n        if (!email.draft_reply) generateDraft(email.id);\n      });\n\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n  };\n\n  // Generate AI draft for a single email\n  const generateDraft = async (id) => {\n    try {\n      setLoadingDrafts(prev => ({ ...prev, [id]: true }));\n      const res = await fetch(`http://localhost:8000/email/${id}/generate-draft`);\n      let draftText = \"Hi, thanks for contacting support. We received your request and will update you shortly.\";\n\n      if (res.ok) {\n        const data = await res.json();\n        draftText = data.draft_reply;\n      }\n\n      // Update the email in state\n      setEmails(prev =>\n        prev.map(e => (e.id === id ? { ...e, draft_reply: draftText } : e))\n      );\n\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoadingDrafts(prev => ({ ...prev, [id]: false }));\n    }\n  };\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ draft_reply: draft }),\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n\n  useEffect(() => {\n    fetchEmails();\n    const interval = setInterval(fetchEmails, 60000); // auto-refresh every 60s\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>AI Support Assistant Dashboard</h1>\n\n      {statusMessage && (\n        <div style={{ marginBottom: '15px', color: '#333', fontWeight: 'bold' }}>\n          {statusMessage}\n        </div>\n      )}\n\n      <Analytics emails={emails} />\n\n      <div className=\"email-list\">\n        {emails.length === 0 && <div className=\"no-emails\">No emails yet.</div>}\n        {emails.map(e => (\n          <EmailCard\n            key={e.id}\n            email={e}\n            onSave={draft => onSaveDraft(e.id, draft)}\n            loadingDraft={loadingDrafts[e.id]} // pass loading state to EmailCard\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
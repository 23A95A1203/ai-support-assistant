{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAVITEJA\\\\Downloads\\\\ai-support-assistant\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processing, setProcessing] = useState(false);\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n    setLoading(false);\n  };\n\n  // Trigger backend fetch-emails (IMAP/SMTP)\n  const triggerFetchEmails = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/fetch-emails\", {\n        method: \"POST\"\n      });\n      const data = await res.json();\n      alert(\"Email fetch started!\");\n      console.log(data);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to start fetching emails\");\n    }\n    setLoading(false);\n  };\n\n  // Trigger backend process-all\n  const triggerProcessAll = async () => {\n    setProcessing(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/process-all\");\n      const data = await res.json();\n      alert(\"All emails processed!\");\n      fetchEmails(); // refresh after processing\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to process emails\");\n    }\n    setProcessing(false);\n  };\n  useEffect(() => {\n    fetchEmails();\n\n    // Auto-refresh every 60s\n    const interval = setInterval(fetchEmails, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          draft_reply: draft\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      alert(\"Draft saved!\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Support Assistant Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        display: 'flex',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: triggerFetchEmails,\n        disabled: loading,\n        children: loading ? \"Fetching...\" : \"Fetch Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: triggerProcessAll,\n        disabled: processing,\n        children: processing ? \"Processing...\" : \"Process All Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchEmails,\n        disabled: loading,\n        children: \"Refresh Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Analytics, {\n      emails: emails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: [emails.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-emails\",\n        children: \"No emails yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 33\n      }, this), emails.map(e => /*#__PURE__*/_jsxDEV(EmailCard, {\n        email: e,\n        onSave: draft => onSaveDraft(e.id, draft)\n      }, e.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"lwSwLNxMdpVLs3Ouzxk0Z/jvB7s=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","EmailCard","Analytics","jsxDEV","_jsxDEV","Dashboard","_s","emails","setEmails","loading","setLoading","processing","setProcessing","fetchEmails","res","fetch","data","json","err","console","error","alert","triggerFetchEmails","method","log","triggerProcessAll","interval","setInterval","clearInterval","onSaveDraft","id","draft","headers","body","JSON","stringify","draft_reply","ok","Error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","display","gap","onClick","disabled","length","map","e","email","onSave","_c","$RefreshReg$"],"sources":["C:/Users/RAVITEJA/Downloads/ai-support-assistant/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport EmailCard from './EmailCard';\nimport Analytics from './Analytics';\n\nexport default function Dashboard() {\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [processing, setProcessing] = useState(false);\n\n  // Fetch emails from backend\n  const fetchEmails = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/emails\");\n      const data = await res.json();\n      setEmails(data);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch emails\");\n    }\n    setLoading(false);\n  };\n\n  // Trigger backend fetch-emails (IMAP/SMTP)\n  const triggerFetchEmails = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/fetch-emails\", { method: \"POST\" });\n      const data = await res.json();\n      alert(\"Email fetch started!\");\n      console.log(data);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to start fetching emails\");\n    }\n    setLoading(false);\n  };\n\n  // Trigger backend process-all\n  const triggerProcessAll = async () => {\n    setProcessing(true);\n    try {\n      const res = await fetch(\"http://localhost:8000/process-all\");\n      const data = await res.json();\n      alert(\"All emails processed!\");\n      fetchEmails(); // refresh after processing\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to process emails\");\n    }\n    setProcessing(false);\n  };\n\n  useEffect(() => {\n    fetchEmails();\n\n    // Auto-refresh every 60s\n    const interval = setInterval(fetchEmails, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Save draft to backend\n  const onSaveDraft = async (id, draft) => {\n    try {\n      const res = await fetch(`http://localhost:8000/email/${id}/update-draft`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ draft_reply: draft }),\n      });\n      if (!res.ok) throw new Error(\"Failed to save draft\");\n      alert(\"Draft saved!\");\n      fetchEmails(); // refresh email list after save\n    } catch (err) {\n      console.error(err);\n      alert(\"Error saving draft\");\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>AI Support Assistant Dashboard</h1>\n\n      <div style={{ marginBottom: '20px', display: 'flex', gap: '10px' }}>\n        <button onClick={triggerFetchEmails} disabled={loading}>\n          {loading ? \"Fetching...\" : \"Fetch Emails\"}\n        </button>\n\n        <button onClick={triggerProcessAll} disabled={processing}>\n          {processing ? \"Processing...\" : \"Process All Emails\"}\n        </button>\n\n        <button onClick={fetchEmails} disabled={loading}>\n          Refresh Emails\n        </button>\n      </div>\n\n      <Analytics emails={emails} />\n\n      <div className=\"email-list\">\n        {emails.length === 0 && <div className=\"no-emails\">No emails yet.</div>}\n        {emails.map(e => (\n          <EmailCard key={e.id} email={e} onSave={draft => onSaveDraft(e.id, draft)} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
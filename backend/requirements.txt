# backend/nlp_service.py
import re
from transformers import pipeline
import spacy

# Load English NLP model
nlp = spacy.load("en_core_web_sm")

# Sentiment analysis pipeline (Hugging Face)
sentiment_analyzer = pipeline("sentiment-analysis")

# Priority keywords
PRIORITY_KEYWORDS = ["immediately", "urgent", "cannot access", "critical", "asap", "failure"]

def analyze_sentiment(text: str) -> str:
    """Return Positive, Negative, or Neutral"""
    try:
        result = sentiment_analyzer(text[:512])[0]  # limit input for performance
        label = result['label'].lower()
        if label in ['negative', 'neutral']:
            return "Negative" if label == "negative" else "Neutral"
        else:
            return "Positive"
    except Exception as e:
        print("Sentiment analysis error:", e)
        return "Neutral"

def detect_priority(text: str) -> str:
    """Detect if the email is urgent based on keywords"""
    text_lower = text.lower()
    if any(k in text_lower for k in PRIORITY_KEYWORDS):
        return "Urgent"
    return "Normal"

def extract_contact_details(text: str):
    """Extract phone number and alternative email from text"""
    phone_regex = re.compile(r'(\+?\d{1,3}?[-.\s]?)?(\(?\d{3}\)?[-.\s]?){1,2}\d{3,4}')
    email_regex = re.compile(r'[\w\.-]+@[\w\.-]+')

    phones = phone_regex.findall(text)
    emails = email_regex.findall(text)

    phone = phones[0][0] if phones else None
    alt_email = emails[0] if emails else None

    return phone, alt_email
